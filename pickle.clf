% Substructural operational semantics of Pickle (DILL-based programs)

atom : type.
% ... : atom
a : atom.
b : atom.
c : atom.

prop : type.
at : atom -> prop.
one : prop.
tensor : prop -> prop -> prop.
lolli : prop -> prop -> prop.

process : prop -> type.

% resource : Pi a:atom. process (at a).
pair : process A -> process B -> process (tensor A B).
letpair : process (tensor A B) -> (process A -> process B -> process C) 
           -> process C.
app : process (lolli A B) -> process A -> process B.
lambda : Pi A:prop. (process A -> process B) -> process (lolli A B).
resource : Pi A:prop. process A.

active : Pi A:prop. process A -> type.

% op sem
tens_left : active (tensor T1 T2) (pair P1 P2) -o {active T1 P1 * active T2 P2}.
beta : active B (app (lambda A M) (P : process A)) -o
                {active B (M !P)}.
loll_left : active (lolli A B) P1 * active A P2 -o
                {active B (app P1 P2)}.


% test

init : type.
initialize : 
  init -o { active (lolli (at a) (at b)) (resource (lolli (at a) (at b))) *
            active (lolli (at a) (at c)) (resource (lolli (at a) (at c))) *
            active (lolli (at b) (at c)) (resource (lolli (at b) (at c))) *
            % active (at a) (resource (at a)) *
            active (at a) (resource (at a))
          }.

#trace * init.

% foo : type.
% bar : type.
% baz : type.
% foobar : foo -o {bar}.
% foobaz : foo -o {baz}.
% #trace * {foo}.

